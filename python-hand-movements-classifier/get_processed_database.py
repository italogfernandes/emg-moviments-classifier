#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#%% Importing the libraries
import pandas as pd # reading files
import numpy as np # handling numerical data
import matplotlib.pyplot as plt # Plotting
from scipy import signal

#########################
#%% Importing the dataset
#########################

volunteer_id = 1
dataset = pd.read_csv('datasets/volunteer_'+str(volunteer_id)+'.csv', sep=',',
 nrows=150000)

emg_channels = dataset.iloc[:, 1:-1].values
emg_out = dataset.iloc[:, -1].values

dataset = None

#########################
#%% Pre-processing simulating real time implementation
#########################

Fs = 1000.0 # Sampling Freq

Fstop_high = 70.0  # Frequency to remove with band stop filter - 60Hz
Fstop_low = 50.0;
Fpa = 3.0 # Highpass cut-off frequency - Removes the offset generated by a DC signal
Fpb = 10.0 # Lowpass cut-off frequency - Smooths the signal
Npa_0db = np.sqrt(0.1024 + (Fpa/Fs)**2) / (Fpa/Fs)
Npb_0db = np.sqrt(0.1024 + (Fpb/Fs)**2) / (Fpb/Fs)
Nstoplow_0db = np.sqrt(0.1024 + (Fstop_low/Fs)**2) / (Fstop_low/Fs)
Nstop_high_0db = np.sqrt(0.1024 + (Fstop_high/Fs)**2) / (Fstop_high/Fs)
print("qnt points %.2f | %.2f | %.2f -> %.2f " % (Npb_0db, Npa_0db, Nstoplow_0db, Nstop_high_0db))
#Fco_3db = Fs * 0.442947 / np.sqrt((qnt_points_mva**2)-1)

# Applying high-pass mva filter to remove offset
Nhp = 100
Fco_0db = Fs * 0.32 / np.sqrt((Nhp**2)-1)
emg_channels_no_offset = do_high_pass_mva((emg_channels[:,0]), Nhp)

# Envelope
emg_retificado = np.abs(emg_channels_no_offset)
Nenv = 40
Fenv_0db = Fs * 0.32 / np.sqrt((Nenv**2)-1)
emg_envelope = do_moving_average((emg_retificado), Nenv)

'''
# NOTE: Not working Applying Band Stop filter for removing 60Hz interference
# TODO: fix it
N1_bs = 4
N2_bs = 6

emg_channels_envoltoria = do_band_pass_mva((emg_channels_no_offset), N1_bs, N2_bs)
F1bs = Fs * 0.32 / np.sqrt((N1_bs**2)-1)
F2bs = Fs * 0.32 / np.sqrt((N2_bs**2)-1)
'''

ax1 = plt.subplot(2,1,1)
plt.plot(emg_channels[:,0])
ax2 = plt.subplot(2,1,2)

plt.plot(emg_channels_no_offset)
plt.title("filtered: high pass %.2f Hz and (%.2f, %.2f)" % (Fco_0db, F1F1bs, F2F2bs))
#plt.title("filtered high pass %.2f Hz" % Fco_0db)
plt.hold('on')

plt.plot(emg_envelope)

ax1.get_shared_x_axes().join(ax1,ax2)
ax1.get_shared_y_axes().join(ax1,ax2)
plt.show()

#%% Windowing
#########################
#TODO


###############################
#%% Optional: Plotting the data
###############################

# Here we use the matplotlib library to plot a small window of the signal
# And verify if everything is all right

fig = plt.figure()
axes = [None for i in range(4)]
for i in range(4):
    axes[i] = plt.subplot(4,1,i+1)
    plt.plot(emg_channels[:,i])
    plt.plot(emg_out[:]/10.0)
    plt.title('Ch ' + str(i+1))
    plt.ylim((-1,1))
    plt.grid()

axes[0].get_shared_x_axes().join(axes[0],axes[1],axes[2],axes[3])
axes[0].get_shared_y_axes().join(axes[0],axes[1],axes[2],axes[3])
axes[0].set_xticklabels([])
axes[1].set_xticklabels([])
axes[2].set_xticklabels([])
plt.show()
