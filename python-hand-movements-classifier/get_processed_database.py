#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#%% Importing the libraries
import pandas as pd # reading files
import numpy as np # handling numerical data
import matplotlib.pyplot as plt # Plotting
from scipy import signal
import sys
sys.path.append('python-hand-movements-classifier')
from pseudo_real_time_filter import *
from feature_extractor import *
#########################
#%% Importing the dataset
#########################

volunteer_id = 6
dataset = pd.read_csv('datasets/volunteer_'+str(volunteer_id)+'.csv', sep=',', nrows=150000)

emg_channels = dataset.iloc[:, 1:-1].values
emg_out = dataset.iloc[:, -1].values

dataset = None

###############################
#%% Optional: Plotting the data
###############################

# Here we use the matplotlib library to plot a small window of the signal
# And verify if everything is all right
'''
fig = plt.figure()
axes = [None for i in range(4)]
for i in range(4):
    axes[i] = plt.subplot(4,1,i+1)
    plt.plot(emg_channels[:,i])
    plt.plot(emg_out[:]/10.0)
    plt.title('Ch ' + str(i+1))
    plt.ylim((-1,1))
    plt.grid()

axes[0].get_shared_x_axes().join(axes[0],axes[1],axes[2],axes[3])
axes[0].get_shared_y_axes().join(axes[0],axes[1],axes[2],axes[3])
axes[0].set_xticklabels([])
axes[1].set_xticklabels([])
axes[2].set_xticklabels([])
plt.show()
'''
#########################
#%% Pre-processing simulating real time implementation
#########################

Fs = 1000.0 # Sampling Freq

#########################
#%% Designing filters
#########################
Fstop_high = 65.0  # Frequency to remove with band stop filter - 60Hz
Fstop_low = 55.0;
Fpa = 3.0 # Highpass cut-off frequency - Removes the offset generated by a DC signal
Fpb = 10.0 # Lowpass cut-off frequency - Smooths the signal
Npa_0db = np.sqrt(0.1024 + (Fpa/Fs)**2) / (Fpa/Fs)
Npb_0db = np.sqrt(0.1024 + (Fpb/Fs)**2) / (Fpb/Fs)
Nstoplow_0db = np.sqrt(0.1024 + (Fstop_low/Fs)**2) / (Fstop_low/Fs)
Nstop_high_0db = np.sqrt(0.1024 + (Fstop_high/Fs)**2) / (Fstop_high/Fs)
print("qnt points %.2f | %.2f | %.2f -> %.2f " % (Npb_0db, Npa_0db, Nstoplow_0db, Nstop_high_0db))

Nhp = 100
Nlp = 32
N65hz = 5
N55hz = 6
N45hz = 7
print("high_pass filter for offset: %.2f" % (Fs * 0.32 / np.sqrt((Nhp**2)-1)))
print("low_pass filter for envelope: %.2f" % (Fs * 0.32 / np.sqrt((Nlp**2)-1)))
print("band_stop filter f1: %.2f" % (Fs * 0.32 / np.sqrt((N45hz**2)-1)))
print("band_stop filter f2: %.2f" % (Fs * 0.32 / np.sqrt((N55hz**2)-1)))
print("band_stop filter f2: %.2f" % (Fs * 0.32 / np.sqrt((N65hz**2)-1)))
print("Total atraso: %.3f s" % ((1/Fs) * (Nhp+Nlp+N55hz+N65hz)))

#########################
#%% Applyting filters
#########################

emg_pre_processed = np.zeros(emg_channels.shape)
emg_envelope = np.zeros(emg_channels.shape)

for ch in range(4):
    emg = emg_channels[:,ch]
    emg_offset = do_high_pass_mva(emg, Nhp)
    emg_offset_60hz = do_band_stop_mva(emg_offset, N55hz, N65hz)
    emg_offset_60hz_envelope = do_moving_average(np.abs(emg_offset_60hz), Nhp)
    emg_pre_processed[:, ch] = emg_offset_60hz
    emg_envelope[:, ch] = emg_offset_60hz_envelope

#########################
#%% Contraction Sites
#########################
threshould = np.array([0.01, 0.01, 0.01, 0.01])

emg_contractions = np.zeros(shape=emg_envelope.shape, dtype=np.int8)
geral_contractions = np.zeros(len(emg_envelope), dtype=np.int8)

for ch in range(4):
    emg_contractions[:,ch] = emg_envelope[:,ch] > threshould[ch]
    geral_contractions += emg_contractions[:,ch]

#geral_contractions = do_moving_average(geral_contractions,200)
geral_contractions = (geral_contractions > 0).astype(np.int8)
#geral_contractions = emg_out

#####################
#%% Contraction sites
#####################
print("Calculating Contraction Sites")
s3= np.array(emg_out, dtype=np.int8)
s3[s3==0] = -1     # replace zeros with -1
s4=np.where(np.diff(s3))[0]+1
contractions_onsets = s4[np.arange(0,len(s4),2)]
contractions_offsets = s4[np.arange(1,len(s4),2)]
s3 = None
s4 = None
print('*'*30)
################################
#%% plotting_signal_envelope
################################
'''
emg = emg_channels[:,0]
emg_60hz = do_band_stop_mva(emg, N55hz, N65hz)
emg_60hz_offset = do_high_pass_mva(emg_60hz, Nhp)
emg_60hz_offset_envelope = do_moving_average(np.abs(emg_60hz_offset), 500)
emg_offset = do_high_pass_mva(emg, Nhp)
emg_offset_60hz = do_band_stop_mva(emg_offset, N55hz, N65hz)
emg_offset_60hz_envelope = do_moving_average(np.abs(emg_offset_60hz), 500)
emg_60hz_envelope = do_moving_average(np.abs(emg_60hz), Nhp)
'''

'''
ax1 = plt.subplot(4,1,1)
plt.plot(emg_pre_processed[:,0])
plt.plot(emg_envelope[:,0])
plt.title("CH1")
ax2 = plt.subplot(4,1,2)
plt.plot(emg_pre_processed[:,1])
plt.plot(emg_envelope[:,1])
plt.title("CH2")
ax3 = plt.subplot(4,1,3)
plt.plot(emg_pre_processed[:,2])
plt.plot(emg_envelope[:,2])
plt.title("CH3")
ax4 = plt.subplot(4,1,4)
plt.plot(emg_pre_processed[:,3])
plt.plot(emg_envelope[:,3])
plt.title("CH4")

ax1.get_shared_x_axes().join(ax1, ax2, ax3, ax4)
ax1.get_shared_y_axes().join(ax1, ax2, ax3, ax4)
plt.tight_layout()
plt.show()
'''
################################
#%% plotting only envelope
################################
'''
N = len(emg_envelope)
ax1 = plt.subplot(4,1,1)
plt.plot(emg_envelope[:,0])
plt.plot(np.ones(N)*threshould[0])
plt.plot(geral_contractions)
plt.plot(emg_out/10)
plt.title("CH1 - th: %.4f" % (threshould[0]))
ax2 = plt.subplot(4,1,2)
plt.plot(emg_envelope[:,1])
plt.plot(np.ones(N)*threshould[1])
plt.plot(geral_contractions)
plt.plot(emg_out/10)
plt.title("CH2 - th: %.4f" % (threshould[1]))
ax3 = plt.subplot(4,1,3)
plt.plot(emg_envelope[:,2])
plt.plot(np.ones(N)*threshould[2])
plt.plot(geral_contractions)
plt.plot(emg_out/10)
plt.title("CH3 - th: %.4f" % (threshould[2]))
ax4 = plt.subplot(4,1,4)
plt.plot(emg_envelope[:,3])
plt.plot(np.ones(N)*threshould[3])
plt.plot(geral_contractions)
plt.plot(emg_out/10)
plt.title("CH4 - th: %.4f" % (threshould[3]))

ax1.get_shared_x_axes().join(ax1, ax2, ax3, ax4)
ax1.get_shared_y_axes().join(ax1, ax2, ax3, ax4)
plt.tight_layout()
plt.show()
'''
################################
#%% super plot
################################
'''
ax1 = plt.subplot(4,2,1)
plt.plot(emg)
#plt.plot(emg_60hz_offset)
plt.title("EMG")
ax2 = plt.subplot(4,2,3)
plt.plot(emg_60hz)
plt.title("After 54Hz to 65Hz filter")
ax3 = plt.subplot(4,2,5)
plt.plot(emg_60hz_offset)
plt.title("After High pass 3Hz filter")
ax4 = plt.subplot(4,2,7)
plt.plot(emg_60hz_offset_envelope)
plt.title("After Envelop with 10Hz filter")

ax11 = plt.subplot(4,2,2)
plt.plot(emg)
#plt.plot(emg_offset_60hz)
plt.title("EMG")
ax12 = plt.subplot(4,2,4)
plt.plot(emg_offset)
plt.title("After High pass 3Hz filter")
ax13 = plt.subplot(4,2,6)
plt.plot(emg_offset_60hz)
plt.title("After 54Hz to 65Hz filter")
ax14 = plt.subplot(4,2,8)
plt.plot(emg_offset_60hz_envelope)
plt.title("After Envelop with 10Hz filter")

ax1.get_shared_x_axes().join(ax1, ax2, ax3, ax4, ax11, ax12, ax13, ax14)
ax1.get_shared_y_axes().join(ax1, ax2, ax3, ax11, ax12, ax13)
plt.tight_layout()
plt.show()
'''

#########################
#%% Windowing without considering contractions
#########################
#TODO

##################################################
#%% Windowing considering contractions
##################################################
emg_windowed = []
windows_out_signal = []

window_size = 200
contractions_onsets = contractions_onsets + 400
contractions_offsets = contractions_offsets + 400
for contraction_n in range(len(contractions_onsets)):
    start_index = contractions_onsets[contraction_n]
    end_index = contractions_offsets[contraction_n]
    this_window = emg_pre_processed[start_index:start_index+window_size]
    emg_windowed.append(this_window)
    windows_out_signal.append(emg_out[start_index])


all_index_windows = np.array([])

for contraction_n in range(len(contractions_onsets)):
    start_index = contractions_onsets[contraction_n]
    end_index = contractions_offsets[contraction_n]
    all_index_windows = np.append(all_index_windows, np.arange(start_index, start_index+window_size))

all_emg_windows = np.array([])
for n in range(len(emg_windowed)):
    all_emg_windows = np.append(all_emg_windows, emg_windowed[n][:,0])

'''
ax1 = plt.subplot(2,1,1)
plt.plot(emg_pre_processed[:,0])
ax2 = plt.subplot(2,1,2)
plt.plot(emg_pre_processed[:,0])
plt.plot(all_index_windows, all_emg_windows)

ax1.get_shared_x_axes().join(ax1, ax2)
ax1.get_shared_y_axes().join(ax1, ax2)
plt.tight_layout()
plt.show()
'''
##################################################
#%% Calculating Features
##################################################
features_df = []
for wd in range(len(emg_windowed)):
    ch0_features = get_features(emg_windowed[wd][:,0]);
    ch1_features = get_features(emg_windowed[wd][:,1]);
    ch2_features = get_features(emg_windowed[wd][:,2]);
    ch3_features = get_features(emg_windowed[wd][:,3]);
    new_df = pd.DataFrame(np.zeros((1,4*6+2)),
    columns=['rms0','rms1','rms2','rms3', 'zc0', 'zc1', 'zc2', 'zc3', 'mav0', 'mav1', 'mav2', 'mav3', 'var0', 'var1', 'var2', 'var3', 'wl0', 'wl1', 'wl2', 'wl3', 'ssc0', 'ssc1', 'ssc2', 'ssc3', 'contraction', 'output'])
    print("desgra√ßa")
    #ch0
    new_df['rms0'][0] = (ch0_features['rms'])
    new_df['zc0'][0] = (ch0_features['zc'])
    new_df['mav0'][0] = (ch0_features['mav'])
    new_df['var0'][0] = (ch0_features['var'])
    new_df['wl0'][0] = (ch0_features['wl'])
    new_df['ssc0'][0] = (ch0_features['ssc'])
    #ch1
    new_df['rms1'][0] = (ch1_features['rms'])
    new_df['zc1'][0] = (ch1_features['zc'])
    new_df['mav1'][0] = (ch1_features['mav'])
    new_df['var1'][0] = (ch1_features['var'])
    new_df['wl1'][0] = (ch1_features['wl'])
    new_df['ssc1'][0] = (ch1_features['ssc'])
    #ch2
    new_df['rms2'][0] = (ch2_features['rms'])
    new_df['zc2'][0] = (ch2_features['zc'])
    new_df['mav2'][0] = (ch2_features['mav'])
    new_df['var2'][0] = (ch2_features['var'])
    new_df['wl2'][0] = (ch2_features['wl'])
    new_df['ssc2'][0] = (ch2_features['ssc'])
    #ch3
    new_df['rms3'][0] = (ch3_features['rms'])
    new_df['zc3'][0] = (ch3_features['zc'])
    new_df['mav3'][0] = (ch3_features['mav'])
    new_df['var3'][0] = (ch3_features['var'])
    new_df['wl3'][0] = (ch3_features['wl'])
    new_df['ssc3'][0] = (ch3_features['ssc'])
    new_df['contraction'] = 1
    new_df['output'] = windows_out_signal[wd]
    features_df.append(new_df)


##################################################
#%% Writing Dataframe to file
##################################################
processed_database = pd.concat(features_df)
print("Writing new dataframe to file..")
file_name_output = 'datasets/volunteer_'+str(volunteer_id)+'_processed.csv'
processed_database.to_csv(path_or_buf=file_name_output,header=True)
print('*'*30)
